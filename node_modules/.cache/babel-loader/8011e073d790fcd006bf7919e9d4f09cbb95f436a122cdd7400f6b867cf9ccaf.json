{"ast":null,"code":"var _s = $RefreshSig$();\n// // this is a custom hook: externalizing a logic into its own file. for example, to fetch data we need to write the same logic(useEffect) into different components, instead we can make a separate js file and import that..\n// //custom hook needs to start with use\n// import { useEffect, useState } from \"react\";\n// //passing the endpoint\n// const useFetch = (url) => {\n\n//     const [data, setData] = useState(null);\n//     const [isPending, setIsPending] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         //useEffect cleanup: abrt uses for when the user switch to another page before fetching data is done so to avoid that error\n//         const abortCont = new AbortController();\n\n//         //to simulate that fetching data takes a little bit of time, put it in setTimeout\n//         setTimeout(() => {\n//             fetch(url, { signal: abortCont.signal })\n//                 .then(res => {\n//                     if (!res.ok) {\n//                         throw Error('could not fetch the data for that resource');\n//                     }\n//                     return res.json();\n//                 })\n//                 .then(data => {\n//                     setData(data);\n//                     setIsPending(false);\n//                     setError(null);\n//                 })\n//                 .catch(err => {\n//                     if (err.name === 'AbortError') {\n//                         console.log('fetch aborted');\n//                     } else{\n//                         // console.log(err.message);\n//                         setIsPending(false);\n//                         setError(err.message);\n//                     }\n//                 })\n//         }, 1000);\n\n//         return () => abortCont.abort();\n\n//     }, [url]);\n\n//     return { data, isPending, error };\n// }\n\n// export default useFetch;\n\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n        return res.json();\n      }).then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["/Users/samanehhajigholam/Library/CloudStorage/OneDrive-Seneca/Desktop/dojo-blog/src/usefetch.js"],"sourcesContent":["// // this is a custom hook: externalizing a logic into its own file. for example, to fetch data we need to write the same logic(useEffect) into different components, instead we can make a separate js file and import that..\n// //custom hook needs to start with use\n// import { useEffect, useState } from \"react\";\n// //passing the endpoint\n// const useFetch = (url) => {\n\n//     const [data, setData] = useState(null);\n//     const [isPending, setIsPending] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         //useEffect cleanup: abrt uses for when the user switch to another page before fetching data is done so to avoid that error\n//         const abortCont = new AbortController();\n\n//         //to simulate that fetching data takes a little bit of time, put it in setTimeout\n//         setTimeout(() => {\n//             fetch(url, { signal: abortCont.signal })\n//                 .then(res => {\n//                     if (!res.ok) {\n//                         throw Error('could not fetch the data for that resource');\n//                     }\n//                     return res.json();\n//                 })\n//                 .then(data => {\n//                     setData(data);\n//                     setIsPending(false);\n//                     setError(null);\n//                 })\n//                 .catch(err => {\n//                     if (err.name === 'AbortError') {\n//                         console.log('fetch aborted');\n//                     } else{\n//                         // console.log(err.message);\n//                         setIsPending(false);\n//                         setError(err.message);\n//                     }\n//                 })\n//         }, 1000);\n\n//         return () => abortCont.abort();\n\n//     }, [url]);\n\n//     return { data, isPending, error };\n// }\n\n// export default useFetch;\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n\n    setTimeout(() => {\n      fetch(url, { signal: abortCont.signal })\n      .then(res => {\n        if (!res.ok) { // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted')\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      })\n    }, 1000);\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url])\n\n  return { data, isPending, error };\n}\n \nexport default useFetch;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEvCC,UAAU,CAAC,MAAM;MACfC,KAAK,CAACX,GAAG,EAAE;QAAEY,MAAM,EAAEJ,SAAS,CAACI;MAAO,CAAC,CAAC,CACvCC,IAAI,CAACC,GAAG,IAAI;QACX,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;UAAE;UACb,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC3D;QACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;MACnB,CAAC,CAAC,CACDJ,IAAI,CAACX,IAAI,IAAI;QACZG,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACD,IAAI,CAAC;QACbK,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,CACDW,KAAK,CAACC,GAAG,IAAI;QACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;UAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC9B,CAAC,MAAM;UACL;UACAjB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAACY,GAAG,CAACI,OAAO,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMf,SAAS,CAACgB,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,CAACxB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAAAL,EAAA,CArCKF,QAAQ;AAuCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}