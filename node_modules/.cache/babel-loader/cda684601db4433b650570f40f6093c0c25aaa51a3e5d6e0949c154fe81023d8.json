{"ast":null,"code":"var _jsxFileName = \"/Users/samanehhajigholam/Library/CloudStorage/OneDrive-Seneca/Desktop/dojo-blog/src/App.js\";\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n/* \n- here App is the root component of the application(it seats at the top of the app it is the first component that renders to DOM)\n- in react, components have the tree structure, meaning root component seats at the top of this tree.(this is the component that render in our html file)\n- then if we want to add more components, we nest them inside the root component\n\n*** The React Router ***\nstart the same way as the traditional way. we send the initial request to the server and server respond to that by sending back\na single html page(index.html) to the browser BUT it also send back  our compiled react js file which controls our react app\nso from now on the react router can take the full control of the application\n** therefore, the initial index.html that we get is virtually empty. and then react injects the content dynamically using components that we create\nevr\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","Home","jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samanehhajigholam/Library/CloudStorage/OneDrive-Seneca/Desktop/dojo-blog/src/App.js"],"sourcesContent":["import Navbar from './Navbar';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className='content'>\n        <Home />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/* \n- here App is the root component of the application(it seats at the top of the app it is the first component that renders to DOM)\n- in react, components have the tree structure, meaning root component seats at the top of this tree.(this is the component that render in our html file)\n- then if we want to add more components, we nest them inside the root component\n\n*** The React Router ***\nstart the same way as the traditional way. we send the initial request to the server and server respond to that by sending back\na single html page(index.html) to the browser BUT it also send back  our compiled react js file which controls our react app\nso from now on the react router can take the full control of the application\n** therefore, the initial index.html that we get is virtually empty. and then react injects the content dynamically using components that we create\nevr\n\n\n*/"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBH,OAAA,CAACH,MAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVP,OAAA;MAAKE,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBH,OAAA,CAACF,IAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACC,EAAA,GATQP,GAAG;AAWZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}